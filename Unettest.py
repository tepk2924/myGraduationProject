#!/usr/bin/env python
# -*- coding: utf-8 -*-
import tensorflow as tf

def foo(s:str): exec('print(f"layer'+s+': {layer'+s+'.shape}")')

BC = 32
#아래에 나오는 주석들은 BC가 64 채널일 때의 사이즈임.
input_tensor = tf.random.normal((480, 640, 4)) #(480, 640, 4)
print(f"input_tensor: {input_tensor.shape}")
relu = tf.keras.layers.ReLU()
layer00 = tf.expand_dims(tf.pad(input_tensor, ((94, 94), (94, 94), (0, 0)), mode="SYMMETRIC"), axis=0) #(1, 4, 668, 828)
foo("00")
layer01 = relu(tf.keras.layers.Conv2D(filters=BC, kernel_size=(3, 3))(layer00)) #(1, 64, 666, 826)
foo("01")
layer02 = relu(tf.keras.layers.Conv2D(filters=BC, kernel_size=(3, 3))(layer01)) #(1, 64, 664, 824)
foo("02")
layer10 = tf.keras.layers.MaxPool2D((2, 2), (2, 2))(layer02) #(1, 64, 332, 412)
foo("10")
layer11 = relu(tf.keras.layers.Conv2D(filters=2*BC, kernel_size=(3, 3))(layer10)) #(1, 128, 330, 410)
foo("11")
layer12 = relu(tf.keras.layers.Conv2D(filters=2*BC, kernel_size=(3, 3))(layer11)) #(1, 128, 328, 408)
foo("12")
layer20 = tf.keras.layers.MaxPool2D((2, 2), (2, 2))(layer12) #(1, 128, 164, 204)
foo("20")
layer21 = relu(tf.keras.layers.Conv2D(filters=4*BC, kernel_size=(3, 3))(layer20)) #(1, 256, 162, 202)
foo("21")
layer22 = relu(tf.keras.layers.Conv2D(filters=4*BC, kernel_size=(3, 3))(layer21)) #(1, 256, 160, 200)
foo("22")
layer30 = tf.keras.layers.MaxPool2D((2, 2), (2, 2))(layer22) #(1, 256, 80, 100)
foo("30")
layer31 = relu(tf.keras.layers.Conv2D(filters=8*BC, kernel_size=(3, 3))(layer30)) #(1, 512, 78, 98)
foo("31")
layer32 = relu(tf.keras.layers.Conv2D(filters=8*BC, kernel_size=(3, 3))(layer31)) #(1, 512, 76, 96)
foo("32")
layer40 = tf.keras.layers.MaxPool2D((2, 2), (2, 2))(layer32) #(1, 512, 38, 48)
foo("40")
layer41 = relu(tf.keras.layers.Conv2D(filters=16*BC, kernel_size=(3, 3))(layer40)) #(1, 1024, 36, 46)
foo("41")
layer42 = relu(tf.keras.layers.Conv2D(filters=16*BC, kernel_size=(3, 3))(layer41)) #(1, 1024, 34, 44)
foo("42")
layer32_cropped = tf.keras.layers.Cropping2D(cropping=((4, 4), (4, 4)))(layer32) #(1, 512, 68, 88)
layer42_upsample = tf.keras.layers.UpSampling2D(size=(2, 2))(layer42) #(1, 1024, 68, 88)
layer42_conved22 = tf.keras.layers.Conv2D(filters=8*BC, kernel_size=(2, 2), padding="same")(layer42_upsample) #(1, 512, 68, 88)
layer50 = tf.keras.layers.Concatenate(axis=1)((layer32_cropped, layer42_conved22)) #(1, 1024, 68, 88)
foo("50")
layer51 = relu(tf.keras.layers.Conv2D(filters=8*BC, kernel_size=(3, 3))(layer50)) #(1, 512, 66, 86)
foo("51")
layer52 = relu(tf.keras.layers.Conv2D(filters=8*BC, kernel_size=(3, 3))(layer51)) #(1, 512, 64, 84)
foo("52")
layer22_cropped = tf.keras.layers.Cropping2D(cropping=((16, 16), (16, 16)))(layer22) #(1, 256, 128, 168)
layer52_upsample = tf.keras.layers.UpSampling2D(size=(2, 2))(layer52) #(1, 512, 128, 168)
layer52_conved22 = tf.keras.layers.Conv2D(filters=4*BC, kernel_size=(2, 2), padding="same")(layer52_upsample) #(1, 256, 128, 168)
layer60 = tf.keras.layers.Concatenate(axis=1)((layer22_cropped, layer52_conved22)) #(1, 512, 128, 168)
foo("60")
layer61 = relu(tf.keras.layers.Conv2D(filters=4*BC, kernel_size=(3, 3))(layer60)) #(1, 256, 126, 166)
foo("61")
layer62 = relu(tf.keras.layers.Conv2D(filters=4*BC, kernel_size=(3, 3))(layer61)) #(1, 256, 124, 164)
foo("62")
layer12_cropped = tf.keras.layers.Cropping2D(cropping=((40, 40), (40, 40)))(layer12) #(1, 128, 248, 328)
layer62_upsample = tf.keras.layers.UpSampling2D(size=(2, 2))(layer62) #(1, 256, 248, 328)
layer62_conved22 = tf.keras.layers.Conv2D(filters=2*BC, kernel_size=(2, 2), padding="same")(layer62_upsample) #(1, 128, 248, 328)
layer70 = tf.keras.layers.Concatenate(axis=1)((layer12_cropped, layer62_conved22)) #(1, 256, 248, 328)
foo("70")
layer71 = relu(tf.keras.layers.Conv2D(filters=2*BC, kernel_size=(3, 3))(layer70)) #(1, 128, 246, 326)
foo("71")
layer72 = relu(tf.keras.layers.Conv2D(filters=2*BC, kernel_size=(3, 3))(layer71)) #(1, 128, 244, 324)
foo("72")
layer02_cropped = tf.keras.layers.Cropping2D(cropping=((88, 88), (88, 88)))(layer02) #(1, 64, 488, 648)
layer72_upsample = tf.keras.layers.UpSampling2D(size=(2, 2))(layer72) #(1, 128, 488, 648)
layer72_conved22 = tf.keras.layers.Conv2D(filters=BC, kernel_size=(2, 2), padding="same")(layer72_upsample) #(1, 64, 488, 648)
layer80 = tf.keras.layers.Concatenate(axis=1)((layer02_cropped, layer72_conved22)) #(1, 128, 488, 648)
foo("80")
layer81 = relu(tf.keras.layers.Conv2D(filters=BC, kernel_size=(5, 5))(layer80)) #(1, 64, 484, 644)
foo("81")
layer82 = relu(tf.keras.layers.Conv2D(filters=BC, kernel_size=(5, 5))(layer81)) #(1, 64, 480, 640)
foo("82")
output_tensor = tf.squeeze(tf.keras.layers.Conv2D(filters=3, kernel_size=(1, 1))(layer82)) #(3, 480, 640)
print(f"output_tensor: {output_tensor.shape}")
print(output_tensor)